class TestData:
	def __init__(self,name):
		self.name=name;
		self.killedMutants=[];
	
	def addKilledMutants(self,m):
		if m not in self.killedMutants:
			self.killedMutants.append(m);
	
	def removeMutant(self,m):
		if m in self.killedMutants:
			self.killedMutants.remove(m);
	
	def getCoverage(self):
		return len(self.killedMutants);
import random;
def sortTestsByCoverage(dic_tests):
	tests_covs=[];
	for t in dic_tests:
		tests_covs.append([t,dic_tests[t].getCoverage()]);
	random.shuffle(tests_covs)
	tests_covs.sort(key = lambda x:x[1],reverse =True)
	return tests_covs;

def loadBase(MTS):
	file=open('test results/Base.txt');
	lines=file.readlines();
	data={};
	for line in lines:
		line=line.strip().split(",");
		test=line[0].strip();
		output=line[1].strip();
		if test in MTS:
			data[test]=output;
	return data;

def loadMutant(base_results,filename,MTS):
	file=open('test results/'+filename+'.txt');
	lines=file.readlines();
	data={};
	for line in lines:
		line=line.strip().split(",");
		test=line[0].strip();
		output=line[1].strip();
		if test in MTS:
			data[test]=output;
	return data;


def isSame(res_a,res_b):
	for t in res_a:
		if res_a[t]!=res_b[t]:
			return False;
	return True;





type='Equivalence';
writer=open("MinimalTestSuite_"+type+".txt",'w');
writer_killed=open("Killed_MinimalTestSuite_"+type+".txt",'w');
writer.write("Minimal Test Suite by "+type+":\n");
writer_killed.write("Killed Mutants by Minimal Test Suites by "+type+":\n");
trial=0;
ALL_SETS=[];
set_number=0;
while trial<10000:
	trial=trial+1;
	tests={}
	mutants=[];
	print(trial);
	filename='difsets_'+type+'.csv';
	file=open(filename);
	lines=file.readlines();
	mutants=lines[0].strip().split(",")[1:];
	for i in range(1,len(lines)):
		line=lines[i].strip().split(",");
		test_name=line[0];
		test_obj= TestData(test_name);
		for j in range(1,len(line)):
			if line[j]=='1':
				test_obj.addKilledMutants(mutants[j-1]);
		tests[test_name]=test_obj;

	minimal_test_suits=[];

	while len(mutants)>0:
		sorted=sortTestsByCoverage(tests);print(mutants)
		biggest_test=sorted[0][0];
		killed_mutants=tests[biggest_test].killedMutants;
		minimal_test_suits.append(biggest_test);
		del tests[biggest_test]
		for t in tests:
			for m in killed_mutants:
				tests[t].removeMutant(m);
		for m in killed_mutants:
			mutants.remove(m);
	minimal_test_suits=[int(i) for i in minimal_test_suits];
	minimal_test_suits.sort();
	minimal_test_suits=[str(i) for i in minimal_test_suits];
	str_test_suits=",".join(minimal_test_suits);
	if str_test_suits in ALL_SETS:
		continue;
	set_number=set_number+1;
	ALL_SETS.append(str_test_suits);
	writer.write("Set "+str(set_number)+"(size="+str(len(minimal_test_suits))+"):"+",".join(minimal_test_suits)+"\n");
	
	base_results=loadBase(minimal_test_suits); #load the results of the base program
	mutants_all=['m'+str(i) for i in range(1,95)]; #list of all mutants
	results_all={};
	for m in mutants_all:
		results_all[m]=loadMutant(base_results,m,minimal_test_suits);
	killed_mutants_using_MTS=[];
	for m in mutants_all:
		if not isSame(results_all[m],base_results):
			killed_mutants_using_MTS.append(m);
	writer_killed.write("\nKilled Mutants using set "+str(set_number)+"(killed mutants="+str(len(killed_mutants_using_MTS))+"):\n"+",".join(killed_mutants_using_MTS)+"\n");
writer.close();
writer_killed.close();
